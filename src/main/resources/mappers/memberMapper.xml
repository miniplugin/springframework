<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	...131p.http://www.mybatis.org/mybatis-3/getting-started.html
	아래쪽 Exploring Mapped SQL Statements 참조.
	XML Mapper를 작성할 때는 클래스의 패키지와 유사한 용도로, MyBatis내에서 원하는 SQL문을 찾을 수 있는
	namespace 설정에 가장 신경을 많이 써야 함.
	XML Mapper는 root-context.xml에서 스프링이 인식하도록 등록함.
	/src/main/webapp/WEB-INF/spring/root-context.xml
 -->
  <!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- 
	MyBatis는 기본적으로 PreparedStatement를 이용해서 처리됨.
	개발자가 PreparedStatement에 들어가는 파라미터를 사용할 때는 '#{}'기호를 이용해서 처리함.
	'#{}'의 규칙.
		1. 파라미터가 여러 속성을 가진 객체인 경우 '#{num}'은 getNum() or setNum()을 의미함.
		2. 파라미터가 하나이고, 기본자료형이나 문자열인 경우 값이 그대로 전달됨.
		3. 파라미터가 Map타입인 경우 '#{num}'은 Map객체의 키값이 'num'인 값을 찾는다.
 --> 
 
<!-- 
	...131p.패키지익스플로러에서 프로젝트 경로구조와 상관없이 개발자가 mapper태그의 namespace 속성값을
	지정한 것이 프로젝트에서 통용되는 경로명으로 인식됨.
	MyBatis가 인식하도록 root-context.xml에서 등록함.
--> 
<mapper namespace="org.edu.mapper.MemberMapper">

  <select id="getTime" resultType="String">
    select now()
  </select>
  
  <insert id="insertMember">
    insert into tbl_member (USER_ID, USER_PW, USER_NAME, EMAIL, POINT, ENABLED, LEVEL, REG_DATE) 
    			values (#{user_id}, #{user_pw}, #{user_name}, #{email}, #{point}, #{enabled}, #{level}, now())
  </insert>  
  
  <select id="selectMember" 
          resultType="org.edu.vo.MemberVO">
	  select 
	    * 
	  from 
	    tbl_member 
	  where user_id = #{user_id}
  </select>  
  
 <update id="updateMember">
	 update tbl_member set 
	  <if test="user_pw != ''">user_pw =#{user_pw},</if> 
	 user_name =#{user_name}, email =#{email}, level =#{level}, enabled =#{enabled}
	 where user_id = #{user_id}
 </update>
 
 <sql id="sqlWhere">
	 <if test="searchType != null" > 
	   <if test="searchType == 't'.toString()">
	     and user_id like CONCAT('%', #{keyword}, '%')
	   </if>
	   <if test="searchType == 'c'.toString()">
	     and user_name like CONCAT('%', #{keyword}, '%')
	   </if>
	   <if test="searchType == 'w'.toString()">
	     and email like CONCAT('%', #{keyword}, '%')
	   </if>     
	   <if test="searchType == 'tc'.toString()">
	     and ( user_id like CONCAT('%', #{keyword}, '%') 
	     OR user_name like CONCAT('%', #{keyword}, '%'))
	   </if>        
	   <if test="searchType == 'cw'.toString()">
	     and ( user_name like CONCAT('%', #{keyword}, '%') 
	     OR email like CONCAT('%', #{keyword}, '%'))
	   </if>        
	   <if test="searchType == 'tcw'.toString()">
	     and (   user_id like CONCAT('%', #{keyword}, '%') 
	           OR 
	             user_name like CONCAT('%', #{keyword}, '%') 
	           OR 
	             email like CONCAT('%', #{keyword}, '%'))
	   </if>              
	 </if>  
	</sql>
	 
	 <!-- ...330p. include태그로 sql태그를 재사용함. -->
	<select id="listAll" resultType="org.edu.vo.MemberVO">
		<![CDATA[  
		  select * 
		  from tbl_member 
		  where user_id IS NOT NULL
		]]>  
	
		<include refid="sqlWhere"></include>
	  
		<![CDATA[    
		  order by reg_date desc
		  limit #{pageStart}, #{perPageNum}
		]]>  
	</select>
	
	<select id="countUser_id" resultType="int">
		<![CDATA[  
		  select count(user_id) 
		  from tbl_member 
		  where user_id IS NOT NULL
		]]>
		
	  	<include refid="sqlWhere"></include>
	 
	</select>
	
<!--
	...145p.파라미터가 2개 이상 전달될 경우, Map 타입의 객체로 파라미터를 사용함. 
 -->  
  <select id="readWithPW" 
         resultType="org.edu.vo.MemberVO">
	  select 
	    * 
	  from 
	    tbl_member 
	  where user_id = #{user_id} 
	    and user_pw = #{user_pw}
  </select>  
  <!-- 학생 실습용 -->
  <delete id="delete">
	 delete from tbl_member where user_id = #{user_id}
  </delete>
  
</mapper>